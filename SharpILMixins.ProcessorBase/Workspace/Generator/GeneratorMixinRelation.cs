using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using SharpILMixins.Processor.Utils;
using SharpILMixins.Processor.Workspace.Processor;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace SharpILMixins.Processor.Workspace.Generator
{
    public class GeneratorMixinRelation
    {
        internal const string GeneratedByAttribute = "Generated by SharpILMixins";

        private readonly SyntaxTokenList _publicStaticModifiers =
            TokenList(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword));

        public GeneratorMixinRelation(MixinRelation mixinRelation)
        {
            MixinRelation = mixinRelation;
            MixinActions = mixinRelation.TargetType.Methods
                .Where(a => a.HasBody)
                .Select(a => new GeneratorMixinAction(a, mixinRelation.TargetType))
                .Where(a => SyntaxFacts.IsValidIdentifier(a.SimpleTargetMethodName))
                .DistinctBy(a => a.SimpleTargetMethodName).ToList();
            var targetName = mixinRelation.GetTargetName();
            SimpleTargetName = targetName.Substring(Math.Max(0, targetName.LastIndexOf('.') + 1));
        }

        public MixinRelation MixinRelation { get; }

        public string SimpleTargetName { get; }

        public List<GeneratorMixinAction> MixinActions { get; }

        public ClassDeclarationSyntax? ToSyntax()
        {
            var methodConstants = MixinActions.SelectMany(c => c.ToSyntax()).ToArray();
            if (methodConstants.Length == 0)
                return null;

            return ClassDeclaration($"{string.Join("", SimpleTargetName.Select(c => SyntaxFacts.IsIdentifierPartCharacter(c) ? c : '_'))}Targets")
                .AddMembers(
                    ClassDeclaration("Methods")
                        .AddMembers(methodConstants.ToArray())
                        .WithModifiers(_publicStaticModifiers)
                )
                .WithModifiers(_publicStaticModifiers).WithAttributeLists(GetGeneratedByAttribute())
                .NormalizeWhitespace();
        }

        private static SyntaxList<AttributeListSyntax> GetGeneratedByAttribute()
        {
            return SingletonList(
                AttributeList(
                    SingletonSeparatedList(
                        Attribute(IdentifierName(typeof(DescriptionAttribute).FullName!))
                            .WithArgumentList(
                                AttributeArgumentList(
                                    SingletonSeparatedList(
                                        AttributeArgument(
                                            LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                Literal(GeneratedByAttribute)))))))));
        }
    }
}